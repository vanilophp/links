<?php

declare(strict_types=1);

/**
 * Contains the LinkTypeTest class.
 *
 * @copyright   Copyright (c) 2022 Attila Fulop
 * @author      Attila Fulop
 * @license     MIT
 * @since       2022-02-11
 *
 */

namespace Vanilo\Links\Tests\Unit;

use Illuminate\Support\Str;
use Vanilo\Links\Models\LinkType;
use Vanilo\Links\Tests\TestCase;

class LinkTypeTest extends TestCase
{
    /** @test */
    public function it_can_be_created()
    {
        $name = Str::random();
        $type = LinkType::create([
            'name' => $name
        ]);

        $this->assertInstanceOf(LinkType::class, $type);
        $this->assertEquals($name, $type->name);
    }

    /** @test */
    public function the_slug_gets_autogenerated()
    {
        $variant = LinkType::create(['name' => 'Product Variant']);

        $this->assertEquals('product-variant', $variant->slug);
    }

    /** @test */
    public function the_name_must_be_unique()
    {
        LinkType::create(['name' => 'Upsell']);
        $this->expectExceptionMessageMatches('/UNIQUE constraint failed/');
        LinkType::create(['name' => 'Upsell']);
    }

    /** @test */
    public function the_autogenerated_slug_is_unique()
    {
        $xsell1 = LinkType::create(['name' => 'Cross Sell']);
        $xsell2 = LinkType::create(['name' => 'Cross sell']);

        $this->assertEquals('cross-sell', $xsell1->slug);
        $this->assertEquals('cross-sell-2', $xsell2->slug);
    }

    /** @test */
    public function is_active_attribute_is_a_boolean()
    {
        $inactive = LinkType::create(['name' => Str::random(), 'is_active' => 0]);
        $active = LinkType::create(['name' => Str::random(), 'is_active' => 1]);

        $this->assertFalse($inactive->is_active);
        $this->assertTrue($active->is_active);
    }

    /** @test */
    public function it_is_active_by_default()
    {
        $this->assertTrue((LinkType::create(['name' => 'Oh I am active']))->fresh()->is_active);
    }

    /** @test */
    public function it_can_be_queried_by_slug()
    {
        LinkType::create(['name' => 'X X X', 'slug' => 'xxx']);
        LinkType::create(['name' => 'X O X', 'slug' => 'xox']);

        $result = LinkType::bySlug('xox')->get();

        $this->assertCount(1, $result);
        $this->assertEquals('X O X', $result->first()->name);
        $this->assertEquals('xox', $result->first()->slug);
    }

    /** @test */
    public function it_can_be_found_by_slug_using_the_static_method()
    {
        LinkType::create(['name' => 'Kai', 'slug' => 'kai']);
        LinkType::create(['name' => 'Jay', 'slug' => 'jay']);
        LinkType::create(['name' => 'Cole', 'slug' => 'cole']);

        $cole = LinkType::findBySlug('cole');

        $this->assertInstanceOf(LinkType::class, $cole);
        $this->assertEquals('Cole', $cole->name);
        $this->assertEquals('cole', $cole->slug);
    }
}
